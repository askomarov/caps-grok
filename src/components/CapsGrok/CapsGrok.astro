---
interface Props {}

const {} = Astro.props;
---

<div class="grok-wrap mx-auto">
  <svg
    class="dynamic-svg"
    id="dynamic-svg"
    xmlns="http://www.w3.org/2000/svg"
    width="100%"
    preserveAspectRatio="xMidYMid meet"
  >

    <defs>
      <style>
      @import url('https://fonts.googleapis.com/css2?family=Oswald:wght@400;700&display=swap');
      text { font-family: 'Oswald', sans-serif; }
      </style>
    </defs>
    <mask id="dynmask">
      <rect x="0" y="0" width="100%" height="100%" fill="#fff"></rect>
      <text
        id="svg-text"
        font-family="Oswald, sans-serif"
        font-weight="black"
        text-anchor="middle"
        fill="transparent"
        stroke-width="0.15"
        stroke="red"
        dominant-baseline="middle"
      >
        CAPS
      </text>
    </mask>
    <rect
      x="0"
      y="0"
      width="100%"
      height="100%"
      mask="url(#dynmask)"
      fill="var(--bg-color)"></rect>
  </svg>
  <!--  -->
  <svg
    class="logo"
    viewBox="0 0 286 104"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <mask id="maskcaps">
      <rect x="0" y="0" width="286" height="104" fill="#fff"></rect>
      <path
        class="logo__path"
        d="M234.226 88.8978L234.227 88.8993C236.312 93.4267 239.406 96.7907 243.507 98.9793C247.602 101.165 252.688 102.25 258.751 102.25C263.946 102.25 268.438 101.162 272.214 98.9757C276.063 96.7933 279.034 93.84 281.121 90.1175L281.123 90.1155C283.208 86.3148 284.25 82.1113 284.25 77.5102C284.25 70.7517 282.773 65.06 279.804 60.4494C276.933 55.8666 273.383 51.7667 269.157 48.15C269.157 48.1495 269.156 48.1491 269.156 48.1486L261.18 41.0692C258.411 38.5968 256.16 36.248 254.425 34.0231C252.797 31.7551 251.974 28.8501 251.974 25.2893C251.974 23.655 252.398 22.0149 253.253 20.3666C254.16 18.7695 255.544 17.9763 257.44 17.9763C259.207 17.9763 260.472 18.5533 261.288 19.6741L261.288 19.6742L261.293 19.6807C262.126 20.7501 262.673 22.339 262.909 24.4764L262.909 24.4764L262.91 24.4867C263.226 26.5544 263.424 29.0245 263.503 31.8988L263.51 32.174L263.784 32.14L282.125 29.8591L282.351 29.8311L282.344 29.6042C282.264 26.7083 281.906 23.6938 281.268 20.5612C280.707 17.3324 279.586 14.3048 277.905 11.4796C276.292 8.55501 273.875 6.20327 270.664 4.423C267.517 2.63388 263.341 1.75 258.155 1.75C249.774 1.75 243.118 3.9633 238.217 8.41687C233.307 12.7982 230.869 19.1567 230.869 27.4502C230.869 33.3276 232.107 38.2975 234.598 42.3471L234.598 42.3471L234.601 42.352C237.155 46.2939 240.268 49.8331 243.937 52.9692C243.938 52.9696 243.938 52.97 243.939 52.9704L252.273 60.2911L252.275 60.2927C255.518 63.0832 258.083 65.8683 259.973 68.6472L259.975 68.65C261.846 71.3211 262.788 74.6296 262.788 78.5906C262.788 80.2346 262.439 81.7989 261.74 83.2862L261.74 83.2861L261.736 83.2962C261.44 84.0042 260.963 84.53 260.301 84.8825C259.633 85.2376 258.764 85.4235 257.679 85.4235C255.992 85.4235 254.544 84.885 253.321 83.808C252.18 82.7328 251.245 80.9447 250.536 78.4069C249.908 75.8717 249.552 72.5322 249.472 68.3818L249.467 68.0966L249.185 68.1394L230.963 70.9005L230.743 70.9338L230.75 71.1559C230.989 78.3783 232.144 84.296 234.226 88.8978Z"
        stroke="#fff"
        stroke-width="0.5"></path>
      <path
        class="logo__path"
        d="M155.75 102V102.25H156H177.406H177.656V102V59.7809H186.016C191.303 59.7809 196.077 58.9953 200.334 57.4197C204.615 55.8354 208.007 52.9989 210.506 48.9208L210.507 48.9188C213.012 44.7478 214.25 38.7693 214.25 31.0123C214.25 24.8164 213.33 19.5547 211.48 15.2355C209.627 10.8296 206.804 7.49457 203.008 5.2428C199.211 2.90811 194.379 1.75 188.528 1.75H156H155.75V2V102ZM192.949 38.114L192.949 38.114L192.947 38.1234C192.558 40.0504 191.709 41.4716 190.414 42.4152C189.119 43.3585 187.187 43.8488 184.581 43.8488H177.656V17.8056H184.462C187.307 17.8056 189.348 18.378 190.638 19.4744C191.942 20.5833 192.754 22.0907 193.065 24.0152L193.064 24.0152L193.067 24.0268C193.461 25.8985 193.659 28.1027 193.659 30.642C193.659 33.6762 193.421 36.165 192.949 38.114Z"
        stroke="#fff"
        stroke-width="0.5"></path>
      <path
        class="logo__path"
        d="M75.7541 101.955L75.6999 102.25H76H96.2933H96.5066L96.5402 102.039L99.8688 81.1389H113.73L116.94 102.038L116.972 102.25H117.187H137H137.299L137.246 101.955L119.114 1.9554L119.077 1.75H118.868H94.372H94.1638L94.1262 1.95483L75.7541 101.955ZM101.862 67.429L106.74 30.572L111.618 67.429H101.862Z"
        stroke="#fff"
        stroke-width="0.5"></path>
      <path
        class="logo__path"
        d="M15.4803 98.2487L15.4803 98.2487L15.4849 98.2516C19.8491 100.925 25.7278 102.25 33.0987 102.25C40.3867 102.25 46.0679 101.006 50.1152 98.4908L50.1163 98.4901C54.2319 95.9013 57.1028 92.4173 58.7195 88.042C60.4081 83.6077 61.25 78.6153 61.25 73.0684V64.6651V64.4151H61H40.0441H39.7941V64.6651V74.8691C39.7941 76.7795 39.675 78.6495 39.437 80.4791C39.2023 82.2824 38.6185 83.7564 37.6959 84.9139C36.8052 85.9532 35.2968 86.5039 33.0987 86.5039C31.0676 86.5039 29.5425 85.9963 28.4859 85.0165C27.4875 83.936 26.7893 82.5417 26.3986 80.8225C26.0828 78.9996 25.9244 77.0154 25.9244 74.8691V29.1308C25.9244 27.1417 26.0433 25.2738 26.2807 23.5268C26.5937 21.7266 27.2547 20.2528 28.2554 19.0938C29.3106 17.9627 30.9089 17.376 33.0987 17.376C35.3773 17.376 36.9226 17.9669 37.813 19.0827L37.8129 19.0828L37.8184 19.0892C38.7364 20.163 39.28 21.5515 39.4359 23.2711L39.4356 23.2711L39.4372 23.2822C39.675 25.0309 39.7941 26.8603 39.7941 28.7707V38.4946V38.7446H40.0441H61H61.25V38.4946V30.0912C61.25 24.544 60.408 19.6299 58.7178 15.3535C57.0201 11.0582 54.1078 7.73388 49.9898 5.38569C45.9438 2.95293 40.3049 1.75 33.0987 1.75C25.7278 1.75 19.8491 3.07474 15.4849 5.74841L15.4849 5.7484L15.4832 5.74951C11.2026 8.42143 8.17397 12.2286 6.39945 17.1608C4.63062 21.9973 3.75 27.79 3.75 34.533V69.587C3.75 76.1712 4.63095 81.9233 6.39921 86.8385L6.39966 86.8398C8.17437 91.692 11.2026 95.4976 15.4803 98.2487Z"
        stroke="#fff"
        stroke-width="0.5"></path>
    </mask>
    <rect
      x="0"
      y="0"
      width="286"
      height="104"
      mask="url(#maskcaps)"
      fill="var(--bg-color)"></rect>
  </svg>

  <svg
    xmlns="http://www.w3.org/2000/svg"
    viewBox="0 0 653.8 760"
    class="logo logo--small"
  >
    <mask id="stroke2">
      <rect x="0" y="0" width="653.8" height="760" fill="#fff"></rect>
      <path
        fill="#fff"
        class="logo__path"
        d="m27.03,181.69c0-34.46,5.95-65,17.86-91.64,11.9-26.62,29.29-47.46,52.16-62.5,22.87-15.04,50.59-22.56,83.18-22.56,38.53,0,68.21,8.93,89.05,26.79,20.83,17.86,34.54,41.67,41.12,71.43l-51.22,7.52c-4.7-18.48-12.77-33.36-24.2-44.64-11.44-11.28-29.69-16.92-54.75-16.92-22.87,0-41.59,5.72-56.16,17.15-14.57,11.44-25.38,27.1-32.43,46.99-7.05,19.9-10.57,42.53-10.57,67.9,0,40.11,8.46,72.06,25.38,95.87,16.92,23.81,43.39,35.71,79.42,35.71,15.66,0,30.46-1.88,44.41-5.64,13.94-3.76,26.39-9.55,37.36-17.39v-72.84h-79.42v-43.7h127.82v137.69c-16.92,15.35-37.2,26.95-60.86,34.77-23.66,7.83-47.07,11.75-70.25,11.75-50.13,0-88.98-15.51-116.54-46.52-27.57-31.02-41.35-74.09-41.35-129.23Z"
      ></path>
      <path
        fill="#fff"
        class="logo__path"
        d="m378.06,13.46h114.66c24.74,0,45.19,2.67,61.33,7.99,16.13,5.33,28.9,12.61,38.3,21.85,9.4,9.24,16.05,19.66,19.97,31.25,3.91,11.59,5.87,23.5,5.87,35.71,0,21.31-4.46,39.64-13.39,54.98-8.93,15.35-23.11,27.42-42.53,36.18l70.02,147.56h-56.86l-62.03-135.81c-3.76.32-7.6.55-11.51.71-3.92.16-7.6.23-11.04.23h-62.03v134.87h-50.75V13.46Zm188.44,98.68c0-11.9-2.19-22.09-6.58-30.54-4.39-8.46-12.15-14.88-23.26-19.27-11.12-4.38-26.55-6.58-46.29-6.58h-61.56v115.6h66.73c18.48,0,32.9-2.42,43.23-7.28,10.34-4.85,17.54-11.67,21.62-20.44,4.07-8.77,6.11-19.27,6.11-31.49Z"
      ></path>
      <path
        fill="#fff"
        class="logo__path"
        d="m5,579.25c0-37.59,6.65-69.55,19.97-95.87,13.31-26.32,31.72-46.36,55.22-60.15,23.5-13.78,50.75-20.68,81.77-20.68s58.66,6.81,82,20.44c23.33,13.63,41.51,33.44,54.51,59.44,13,26.01,19.5,57.8,19.5,95.4s-6.43,69.63-19.27,96.1c-12.85,26.48-31.02,46.6-54.51,60.38-23.5,13.78-51.07,20.68-82.71,20.68s-58.27-6.82-81.77-20.44c-23.5-13.63-41.82-33.52-54.98-59.68-13.16-26.15-19.74-58.04-19.74-95.63Zm54.04-.47c0,40.1,8.53,71.98,25.61,95.63,17.07,23.66,42.68,35.48,76.83,35.48s58.98-11.82,76.36-35.48c17.39-23.65,26.08-55.52,26.08-95.63s-8.69-71.58-26.08-95.4c-17.39-23.8-42.84-35.71-76.36-35.71s-59.76,11.91-76.83,35.71c-17.08,23.81-25.61,55.61-25.61,95.4Z"
      ></path>
      <path
        fill="#fff"
        class="logo__path"
        d="m378.12,411.01h52.63v155.08l148.03-155.08h57.8l-117.48,125.47,129.7,210.06h-59.21l-107.61-174.81-51.22,53.1v121.71h-52.63v-335.53Z"
      ></path>
    </mask>
    <rect
      x="0"
      y="0"
      width="653.8"
      height="760"
      mask="url(#stroke2)"
      fill="var(--bg-color)"></rect>
  </svg>
  <div class="grok-bg__gradient"></div>
  <!-- <svg class="logo" viewBox="0 0 10 2">
    <mask id="text-mask">
      <rect x="0" y="0" width="10" height="2" fill="#fff"></rect>
      <text
        x="5"
        y="1"
        text-anchor="middle"
        font-size="2"
        font-family="Oswald, sans-serif"
        fill="transparent"
        stroke-width="0.015"
        stroke="red"
        font-family="sans-serif">CAPSBOLD</text
      ></mask
    >
    <rect
      x="0"
      y="0"
      width="10"
      height="2"
      mask="url(#text-mask)"
      fill="var(--bg-color)"></rect>
  </svg> -->
  <div class="box">
    <img
      alt=""
      loading="lazy"
      width="200"
      height="200"
      src="./assets/cursor-mask.png"
    />
  </div>
  <div class="box">
    <img
      alt=""
      loading="lazy"
      width="200"
      height="200"
      src="./assets/cursor-mask.png"
    />
  </div>
  <div class="box">
    <img
      alt=""
      loading="lazy"
      width="200"
      height="200"
      src="./assets/cursor-mask.png"
    />
  </div>
</div>

<script>
  import gsap from 'gsap';

  const mouseCoords = {
    x: 0,
    y: 0
  };

  const boxData = [
    { x: 0, y: 0, lerpFactor: 0.1 }, // orange (самый быстрый)
    { x: 0, y: 0, lerpFactor: 0.05 }, // red (средний)
    { x: 0, y: 0, lerpFactor: 0.025 } // blue (самый медленный)
  ];

  function lerp(start: number, end: number, t: number) {
    return start * (1 - t) + end * t;
  }

  const capsBoldColors = ['#9160e6', '#ffeb23', '#ffffff'];

  // const rainbowColors = [
  //   "red", // 0  (Левый край)
  //   "orange", // 1
  //   "yellow", // 2
  //   "green", // 3  (Центр экрана)
  //   "cyan", // 4
  //   "blue", // 5
  //   "violet" // 6  (Правый край)
  // ];

  document.addEventListener('DOMContentLoaded', () => {
    const container = document.querySelector('.grok-wrap');
    const boxes = document.querySelectorAll('.box');

    if (container && boxes.length) {
      boxes.forEach((box, index) => {
        gsap.set(box, { scale: 1, xPercent: -50, yPercent: -50 });

        const xTo = gsap.quickTo(box, 'x', { duration: 0.3, ease: 'power3' });
        const yTo = gsap.quickTo(box, 'y', { duration: 0.3, ease: 'power3' });

        function handleMouseMove(e) {
          const containerRect = container.getBoundingClientRect();
          const containerWidth = containerRect.width;
          const containerHeight = containerRect.height;

          // Ограничиваем координаты мыши пределами контейнера
          mouseCoords.x = Math.max(
            0,
            Math.min(e.clientX - containerRect.left, containerWidth)
          );
          mouseCoords.y = Math.max(
            0,
            Math.min(e.clientY - containerRect.top, containerHeight)
          );

          // Значение от -1 (лево) до 1 (право)
          let t = (mouseCoords.x - containerWidth / 2) / (containerWidth / 2);
          t = Math.max(-1, Math.min(1, t)); // Ограничиваем диапазон

          // Преобразуем -1..1 в индекс массива (0..6)
          let colorIndex = Math.round(
            ((t + 1) / 2) * (capsBoldColors.length - 1)
          );

          // Меняем цвет боксов
          boxes.forEach((boxAgain, i) => {
            let adjustedIndex = colorIndex - i;
            if (adjustedIndex < 0) {
              adjustedIndex = 0;
            }
            adjustedIndex = Math.min(adjustedIndex, capsBoldColors.length - 1); // Ограничиваем индекс
            (boxAgain as HTMLElement).style.backgroundColor =
              capsBoldColors[adjustedIndex];
          });
        }

        window.addEventListener('mousemove', handleMouseMove);

        gsap.ticker.add(() => {
          const data = boxData[index];
          data.x = lerp(data.x, mouseCoords.x, data.lerpFactor);
          data.y = lerp(data.y, mouseCoords.y, data.lerpFactor);
          xTo(data.x);
          yTo(data.y);
        });
      });
    }

    const text = document.querySelector('#svg-text');
    const svg = document.querySelector('.dynamic-svg');

    if (svg && text) {
      const resizeSVG = () => {
        const bbox = (text as unknown as SVGGraphicsElement).getBBox();
        if (bbox.width === 0 || bbox.height === 0) return;

        const padding = 0;
        const width = bbox.width + padding;
        const height = bbox.height + padding;

        // Устанавливаем размеры SVG
        svg.setAttribute('viewBox', `0 0 ${width} ${height}`);

        // Центрируем текст
        text.setAttribute('x', (width / 2).toString());
        text.setAttribute('y', (height / 2).toString());
        text.setAttribute('dy', (bbox.height * 0.1).toString());
      };

      resizeSVG();
      window.addEventListener('resize', resizeSVG); // Обновление при изменении экрана
    }
  });
</script>
